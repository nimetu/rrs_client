<?php
/*
 * RyzomRenderingService - https://github.com/nimetu/rrs_client.git
 * Copyright (c) 2014 Meelis MÃ¤gi <nimetu@gmail.com>
 *
 * This file is part of RyzomRenderingService.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Rrs;

use PHPUnit\Framework\TestCase;
use Ryzom\Common\EVisualSlot;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-27 at 21:22:20.
 */
class CharacterTest extends TestCase
{
    /** @var Character */
    protected $character;

    public function setUp(): void
    {
        $empty = '748947628835c51f73843ac2b81f051794bc949a';
        $this->character = new Character();
        $this->assertEquals($empty, $this->character->getHash());
    }

    public function testSetVpa()
    {
        // properties are all set to 1
        $vpa = '2310911766417117699';
        $this->character->setVpa($vpa);

        $this->assertEquals(1, $this->character->getGender());
        $this->assertEquals([1,1], $this->character->getSlot(EVisualSlot::CHEST_SLOT));
        $this->assertEquals([1,1], $this->character->getSlot(EVisualSlot::LEGS_SLOT));
        $this->assertEquals([1,1], $this->character->getSlot(EVisualSlot::ARMS_SLOT));
        $this->assertEquals([1,1], $this->character->getSlot(EVisualSlot::HEAD_SLOT));
        $this->assertEquals([1], $this->character->getSlot(EVisualSlot::RIGHT_HAND_SLOT));
        $this->assertEquals([1], $this->character->getSlot(EVisualSlot::LEFT_HAND_SLOT));
    }

    public function testGetVpa()
    {
        $this->assertEquals(0, $this->character->getVpa());

        // properties are all set to 1
        $vpa = '2310911766417117699';
        $this->character->setGender(1);
        $this->character->setSlot(EVisualSlot::CHEST_SLOT, 1, 1);
        $this->character->setSlot(EVisualSlot::LEGS_SLOT, 1, 1);
        $this->character->setSlot(EVisualSlot::ARMS_SLOT, 1, 1);
        $this->character->setSlot(EVisualSlot::HEAD_SLOT, 1, 1);
        $this->character->setSlot(EVisualSlot::RIGHT_HAND_SLOT, 1);
        $this->character->setSlot(EVisualSlot::LEFT_HAND_SLOT, 1);

        $this->assertEquals($vpa, $this->character->getVpa());
    }

    public function testSetVpb()
    {
        // properties are all set to 1
        $vpb = '18829438681089';

        $this->character->setVpb($vpb);

        $this->assertEquals([1,1], $this->character->getSlot(EVisualSlot::HANDS_SLOT));
        $this->assertEquals([1,1], $this->character->getSlot(EVisualSlot::FEET_SLOT));
    }

    public function testGetVpb()
    {
        $this->assertEquals(0, $this->character->getVpb());

        $this->character->setSlot(EVisualSlot::HANDS_SLOT, 1, 1);
        $this->character->setSlot(EVisualSlot::FEET_SLOT, 1, 1);

        // Name=0, HandsModel=1, HandsColor=1, FeetModel=1, FeetColor=1, RTrail=0, LTrail=0
        $vpb = '137741008896';
        $this->assertEquals($vpb, $this->character->getVpb());
    }

    public function testSetVpc()
    {
        // properties are all set to 1
        $vpc = '1200958908699209';

        $this->character->setVpc($vpc);

        $this->assertEquals([1,1,1,1,1,1,1,1], $this->character->getMorph());
        $this->assertEquals([1,1], $this->character->getSlot(EVisualSlot::FACE_SLOT));
        $this->assertEquals([1,1,1,1,1], $this->character->getGabarit());
    }

    public function testGetVpc()
    {
        $this->assertEquals(0, $this->character->getVpc());

        $this->character->setMorph([1,1,1,1,1,1,1,1]);
        $this->character->setSlot(EVisualSlot::FACE_SLOT, 1, 1);
        $this->character->setGabarit([1,1,1,1,1]);

        // properties are all set to 1
        $vpc = '1200958908699209';
        $this->assertEquals($vpc, $this->character->getVpc());
    }

    public function testSetBackground()
    {
        $expected = '078a91681c1f4de06dc49a901caabc0f53c80b69';
        $this->character->setBackground(1, 1, 1, 1);
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetFaceShot()
    {
        $expected = 'ec9c3cc08494e30f62f07db1130057181d4a17af';
        $this->character->setFaceShot(true);
        $this->assertEquals($expected, $this->character->getHash());

        $expected = '748947628835c51f73843ac2b81f051794bc949a';
        $this->character->setFaceShot(false);
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetRace()
    {
        $expected = 'dd68d50d547106b8e1d6995e644f03afc2d94928';
        $this->character->setRace(1);
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetGender()
    {
        $expected = 'cd282775900ceeb29b6db9ae2b324b8315edf8ac';
        $this->character->setGender(1);
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetAge()
    {
        $expected = '9f24f10016fbd22306ce6ccd9aa2dc571ecb1459';
        $this->character->setAge(1);
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetDirection()
    {
        $expected = '854a9e295537841d8a6db43d258c18646d003148';
        $this->character->setDirection(123);
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetAngle()
    {
        $expected = '1d24b183bb0ff13e29ca19ef1d80c8e61bb9f7f5';
        $this->character->setAngle(123);
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetMorph()
    {
        $expected = '1a91d813bf13b0995843dfc7d433d30cc7e3a3c1';
        $this->character->setMorph(array(0, 1, 2, 3, 4, 5, 6, 7));
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetGabarit()
    {
        $expected = 'be4e174c5fa2e3baa3d9500e855b9090ab868de9';
        $this->character->setGabarit(array(1, 2, 3, 4, 5));
        $this->assertEquals($expected, $this->character->getHash());
    }

    public function testSetSlot()
    {
        $expected = '03bf60bad9e50d4a7b064860084746d2055de6a7';
        $this->character->setSlot(EVisualSlot::ARMS_SLOT, 1, 1);
        $this->assertEquals($expected, $this->character->getHash());
    }

}
