<?php
/*
 * RyzomRenderingService - https://github.com/nimetu/rrs_client.git
 * Copyright (c) 2014 Meelis MÃ¤gi <nimetu@gmail.com>
 *
 * This file is part of RyzomRenderingService.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Rrs;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-27 at 19:20:52.
 */
class RaceDefaultsTest extends TestCase
{

    public function testLoad()
    {
        $buf = $this->loadRaceDefaultsFile();

        $rd = new RaceDefaults();

        try {
            $data = $rd->getRaceItems(0, 0);
            $this->fail('Race defaults after init was not empty');
        } catch (\RuntimeException $ex) {
            // expected, all ok
        }

        $rd->load($buf);

        $data = $rd->getRaceItems(0, 0);
        $this->assertNotEmpty($data);
    }

    public function testSave()
    {
        $rd = new RaceDefaults();
        $items = array(
            1 => 'item 0.0.1',
            2 => 'item 0.0.2',
        );
        $rd->setRaceItems(0, 0, $items);
        $items = array(
            1 => 'item 0.1.1',
            2 => 'item 0.1.2',
        );
        $rd->setRaceItems(0, 1, $items);

        $expected = '';
        $expected .= "RACE : 0\n";
        $expected .= "GENDER : 0\n";
        $expected .= "ITEMS :\n";
        $expected .= "1 : item 0.0.1\n";
        $expected .= "2 : item 0.0.2\n";
        $expected .= "RACE : 0\n";
        $expected .= "GENDER : 1\n";
        $expected .= "ITEMS :\n";
        $expected .= "1 : item 0.1.1\n";
        $expected .= "2 : item 0.1.2";

        $buf = $rd->save();
        $this->assertEquals($expected, $buf);
    }

    public function testGetRaceItems()
    {
        $buf = $this->loadRaceDefaultsFile();
        $rd = new RaceDefaults();
        $rd->load($buf);

        $data = $rd->getRaceItems(0, 0);
        $expected = array(
            1 => 'igfvu.sitem',
            2 => 'igfpu.sitem',
            3 => 'fy_cheveux_medium01.sitem',
            4 => 'igfau.sitem',
            5 => 'fy_visage.sitem',
            6 => 'igfgu.sitem',
            7 => 'igfbu.sitem',
        );

        $this->assertEquals($expected, $data);
    }

    public function testClear()
    {
        $race = 0;
        $gender = 0;
        $buf = $this->loadRaceDefaultsFile();
        $rd = new RaceDefaults();
        $rd->load($buf);

        $this->assertNotEmpty($rd->getRaceItems($race, $gender));
        $rd->clear();

        $this->expectException('\RuntimeException', "Unknown race ($race) or gender ($gender)");
        $this->assertEmpty($rd->getRaceItems($race, $gender));
    }

    public function testSetRaceItems()
    {
        $race = 0;
        $gender = 0;
        $rd = new RaceDefaults();

        $this->expectException('\RuntimeException', "Unknown race ($race) or gender ($gender)");
        $this->assertEmpty($rd->getRaceItems($race, $gender));

        $expected = array(
            1 => 'item #1',
            2 => 'item #2',
        );
        $rd->setRaceItems($race, $gender, $expected);

        $data = $rd->getRaceItems($race, $gender);
        $this->assertEquals($expected, $data);
    }

    /** @return string */
    protected function loadRaceDefaultsFile()
    {
        return file_get_contents(__DIR__.'/_files/race_defaults.txt');
    }
}
